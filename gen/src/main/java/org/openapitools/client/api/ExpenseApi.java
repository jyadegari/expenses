/*
 * Expenses
 * Expenses tracker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Expense;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpenseApi {
    private ApiClient localVarApiClient;

    public ExpenseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpenseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for expenseExpenseIdGet
     * @param expenseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shows selected expense based on expense id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseExpenseIdGetCall(Integer expenseId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expense/{expenseId}"
            .replaceAll("\\{" + "expenseId" + "\\}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseExpenseIdGetValidateBeforeCall(Integer expenseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling expenseExpenseIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = expenseExpenseIdGetCall(expenseId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a specified expense by id
     * @param expenseId  (required)
     * @return Expense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shows selected expense based on expense id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public Expense expenseExpenseIdGet(Integer expenseId) throws ApiException {
        ApiResponse<Expense> localVarResp = expenseExpenseIdGetWithHttpInfo(expenseId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a specified expense by id
     * @param expenseId  (required)
     * @return ApiResponse&lt;Expense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shows selected expense based on expense id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Expense> expenseExpenseIdGetWithHttpInfo(Integer expenseId) throws ApiException {
        okhttp3.Call localVarCall = expenseExpenseIdGetValidateBeforeCall(expenseId, null);
        Type localVarReturnType = new TypeToken<Expense>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a specified expense by id
     * @param expenseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shows selected expense based on expense id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseExpenseIdGetAsync(Integer expenseId, final ApiCallback<Expense> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseExpenseIdGetValidateBeforeCall(expenseId, _callback);
        Type localVarReturnType = new TypeToken<Expense>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expenseExpenseIdPut
     * @param expenseId  (required)
     * @param expense Update an expense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows updated expense </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseExpenseIdPutCall(Integer expenseId, Expense expense, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = expense;

        // create path and map variables
        String localVarPath = "/expense/{expenseId}"
            .replaceAll("\\{" + "expenseId" + "\\}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseExpenseIdPutValidateBeforeCall(Integer expenseId, Expense expense, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling expenseExpenseIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = expenseExpenseIdPutCall(expenseId, expense, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update an existing expense
     * @param expenseId  (required)
     * @param expense Update an expense (optional)
     * @return Expense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows updated expense </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public Expense expenseExpenseIdPut(Integer expenseId, Expense expense) throws ApiException {
        ApiResponse<Expense> localVarResp = expenseExpenseIdPutWithHttpInfo(expenseId, expense);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing expense
     * @param expenseId  (required)
     * @param expense Update an expense (optional)
     * @return ApiResponse&lt;Expense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows updated expense </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Expense> expenseExpenseIdPutWithHttpInfo(Integer expenseId, Expense expense) throws ApiException {
        okhttp3.Call localVarCall = expenseExpenseIdPutValidateBeforeCall(expenseId, expense, null);
        Type localVarReturnType = new TypeToken<Expense>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing expense
     * @param expenseId  (required)
     * @param expense Update an expense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows updated expense </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseExpenseIdPutAsync(Integer expenseId, Expense expense, final ApiCallback<Expense> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseExpenseIdPutValidateBeforeCall(expenseId, expense, _callback);
        Type localVarReturnType = new TypeToken<Expense>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expenseGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows list of all expenses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = expenseGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get all the expenses
     * @return List&lt;Expense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows list of all expenses. </td><td>  -  </td></tr>
     </table>
     */
    public List<Expense> expenseGet() throws ApiException {
        ApiResponse<List<Expense>> localVarResp = expenseGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the expenses
     * @return ApiResponse&lt;List&lt;Expense&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows list of all expenses. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Expense>> expenseGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = expenseGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Expense>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the expenses
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows list of all expenses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseGetAsync(final ApiCallback<List<Expense>> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Expense>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expensePost
     * @param expense Add an expense (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> item created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expensePostCall(Expense expense, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = expense;

        // create path and map variables
        String localVarPath = "/expense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expensePostValidateBeforeCall(Expense expense, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = expensePostCall(expense, _callback);
        return localVarCall;

    }

    /**
     * 
     * Adds an expense to the list of expenses
     * @param expense Add an expense (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> item created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
     </table>
     */
    public void expensePost(Expense expense) throws ApiException {
        expensePostWithHttpInfo(expense);
    }

    /**
     * 
     * Adds an expense to the list of expenses
     * @param expense Add an expense (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> item created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expensePostWithHttpInfo(Expense expense) throws ApiException {
        okhttp3.Call localVarCall = expensePostValidateBeforeCall(expense, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds an expense to the list of expenses
     * @param expense Add an expense (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> item created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expensePostAsync(Expense expense, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expensePostValidateBeforeCall(expense, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
